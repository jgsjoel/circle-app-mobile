// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entities/chat.dart';
import 'database/entities/chat_participant.dart';
import 'database/entities/contact.dart';
import 'database/entities/media_file.dart';
import 'database/entities/message.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7079189496457155761),
    name: 'ChatParticipantEntity',
    lastPropertyId: const obx_int.IdUid(4, 261399949780512781),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3643543746193389913),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1625334891985954652),
        name: 'contactPublicId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2990858109597078230),
        name: 'chatId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 84542269412541656),
        relationTarget: 'ChatEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 261399949780512781),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 9142855389694421980),
        relationTarget: 'ContactEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3832357705673586608),
    name: 'ChatEntity',
    lastPropertyId: const obx_int.IdUid(5, 3103092541330175639),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3100250527410301918),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4955014088598827213),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3525578979083908809),
        name: 'publicChatId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 699008326791426361),
        name: 'isGroup',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3103092541330175639),
        name: 'lastUpdated',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'messages',
        srcEntity: 'MessageEntity',
        srcField: 'chat',
      ),
      obx_int.ModelBacklink(
        name: 'participants',
        srcEntity: 'ChatParticipantEntity',
        srcField: 'chat',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3657977270703766687),
    name: 'ContactEntity',
    lastPropertyId: const obx_int.IdUid(4, 3425540403680148712),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1592005465577637740),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7450680208085565563),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3820834296545862589),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3425540403680148712),
        name: 'publicId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'chatParticipants',
        srcEntity: 'ChatParticipantEntity',
        srcField: 'contact',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2320339424421001160),
    name: 'MediaFileEntity',
    lastPropertyId: const obx_int.IdUid(5, 1644220215124370097),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7850437591577990737),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7082336749780716486),
        name: 'publicId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7031969825949450486),
        name: 'messageId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 5017988304020690068),
        relationTarget: 'MessageEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1644220215124370097),
        name: 'source',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 6133973817408149),
    name: 'MessageEntity',
    lastPropertyId: const obx_int.IdUid(8, 6965230768645651872),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2991880668184621725),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4847742888038481324),
        name: 'messageId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5366930114479828441),
        name: 'msgPubId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5420152779761388916),
        name: 'message',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8344772399365846634),
        name: 'fromMe',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2038823329352051959),
        name: 'timestamp',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4710883489835750115),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6965230768645651872),
        name: 'chatId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 8720771372074951860),
        relationTarget: 'ChatEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'mediaFiles',
        srcEntity: 'MediaFileEntity',
        srcField: 'message',
      ),
    ],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 6133973817408149),
    lastIndexId: const obx_int.IdUid(4, 8720771372074951860),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [8031176819481612680],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ChatParticipantEntity: obx_int.EntityDefinition<ChatParticipantEntity>(
      model: _entities[0],
      toOneRelations: (ChatParticipantEntity object) => [
        object.chat,
        object.contact,
      ],
      toManyRelations: (ChatParticipantEntity object) => {},
      getId: (ChatParticipantEntity object) => object.id,
      setId: (ChatParticipantEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ChatParticipantEntity object, fb.Builder fbb) {
        final contactPublicIdOffset = fbb.writeString(object.contactPublicId);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contactPublicIdOffset);
        fbb.addInt64(2, object.chat.targetId);
        fbb.addInt64(3, object.contact.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contactPublicIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ChatParticipantEntity(
          id: idParam,
          contactPublicId: contactPublicIdParam,
        );
        object.chat.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.chat.attach(store);
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.contact.attach(store);
        return object;
      },
    ),
    ChatEntity: obx_int.EntityDefinition<ChatEntity>(
      model: _entities[1],
      toOneRelations: (ChatEntity object) => [],
      toManyRelations: (ChatEntity object) => {
        obx_int.RelInfo<MessageEntity>.toOneBacklink(
          8,
          object.id,
          (MessageEntity srcObject) => srcObject.chat,
        ): object.messages,
        obx_int.RelInfo<ChatParticipantEntity>.toOneBacklink(
          3,
          object.id,
          (ChatParticipantEntity srcObject) => srcObject.chat,
        ): object.participants,
      },
      getId: (ChatEntity object) => object.id,
      setId: (ChatEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ChatEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final publicChatIdOffset = object.publicChatId == null
            ? null
            : fbb.writeString(object.publicChatId!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, publicChatIdOffset);
        fbb.addBool(3, object.isGroup);
        fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final publicChatIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final isGroupParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final object = ChatEntity(
          id: idParam,
          name: nameParam,
          publicChatId: publicChatIdParam,
          isGroup: isGroupParam,
          lastUpdated: lastUpdatedParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<ChatEntity>(
          object.messages,
          store,
          obx_int.RelInfo<MessageEntity>.toOneBacklink(
            8,
            object.id,
            (MessageEntity srcObject) => srcObject.chat,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<ChatEntity>(
          object.participants,
          store,
          obx_int.RelInfo<ChatParticipantEntity>.toOneBacklink(
            3,
            object.id,
            (ChatParticipantEntity srcObject) => srcObject.chat,
          ),
        );
        return object;
      },
    ),
    ContactEntity: obx_int.EntityDefinition<ContactEntity>(
      model: _entities[2],
      toOneRelations: (ContactEntity object) => [],
      toManyRelations: (ContactEntity object) => {
        obx_int.RelInfo<ChatParticipantEntity>.toOneBacklink(
          4,
          object.id,
          (ChatParticipantEntity srcObject) => srcObject.contact,
        ): object.chatParticipants,
      },
      getId: (ContactEntity object) => object.id,
      setId: (ContactEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ContactEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final phoneOffset = fbb.writeString(object.phone);
        final publicIdOffset = fbb.writeString(object.publicId);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, phoneOffset);
        fbb.addOffset(3, publicIdOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final publicIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = ContactEntity(
          id: idParam,
          name: nameParam,
          phone: phoneParam,
          publicId: publicIdParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<ContactEntity>(
          object.chatParticipants,
          store,
          obx_int.RelInfo<ChatParticipantEntity>.toOneBacklink(
            4,
            object.id,
            (ChatParticipantEntity srcObject) => srcObject.contact,
          ),
        );
        return object;
      },
    ),
    MediaFileEntity: obx_int.EntityDefinition<MediaFileEntity>(
      model: _entities[3],
      toOneRelations: (MediaFileEntity object) => [object.message],
      toManyRelations: (MediaFileEntity object) => {},
      getId: (MediaFileEntity object) => object.id,
      setId: (MediaFileEntity object, int id) {
        object.id = id;
      },
      objectToFB: (MediaFileEntity object, fb.Builder fbb) {
        final publicIdOffset = fbb.writeString(object.publicId);
        final sourceOffset = fbb.writeString(object.source);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(2, publicIdOffset);
        fbb.addInt64(3, object.message.targetId);
        fbb.addOffset(4, sourceOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final sourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final publicIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = MediaFileEntity(
          id: idParam,
          source: sourceParam,
          publicId: publicIdParam,
        );
        object.message.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.message.attach(store);
        return object;
      },
    ),
    MessageEntity: obx_int.EntityDefinition<MessageEntity>(
      model: _entities[4],
      toOneRelations: (MessageEntity object) => [object.chat],
      toManyRelations: (MessageEntity object) => {
        obx_int.RelInfo<MediaFileEntity>.toOneBacklink(
          4,
          object.id,
          (MediaFileEntity srcObject) => srcObject.message,
        ): object.mediaFiles,
      },
      getId: (MessageEntity object) => object.id,
      setId: (MessageEntity object, int id) {
        object.id = id;
      },
      objectToFB: (MessageEntity object, fb.Builder fbb) {
        final messageIdOffset = fbb.writeString(object.messageId);
        final msgPubIdOffset = object.msgPubId == null
            ? null
            : fbb.writeString(object.msgPubId!);
        final messageOffset = fbb.writeString(object.message);
        final statusOffset = fbb.writeString(object.status);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, messageIdOffset);
        fbb.addOffset(2, msgPubIdOffset);
        fbb.addOffset(3, messageOffset);
        fbb.addBool(4, object.fromMe);
        fbb.addInt64(5, object.timestamp);
        fbb.addOffset(6, statusOffset);
        fbb.addInt64(7, object.chat.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final messageIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final msgPubIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final messageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final fromMeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final timestampParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = MessageEntity(
          id: idParam,
          messageId: messageIdParam,
          msgPubId: msgPubIdParam,
          message: messageParam,
          fromMe: fromMeParam,
          timestamp: timestampParam,
          status: statusParam,
        );
        object.chat.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.chat.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<MessageEntity>(
          object.mediaFiles,
          store,
          obx_int.RelInfo<MediaFileEntity>.toOneBacklink(
            4,
            object.id,
            (MediaFileEntity srcObject) => srcObject.message,
          ),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChatParticipantEntity] entity fields to define ObjectBox queries.
class ChatParticipantEntity_ {
  /// See [ChatParticipantEntity.id].
  static final id = obx.QueryIntegerProperty<ChatParticipantEntity>(
    _entities[0].properties[0],
  );

  /// See [ChatParticipantEntity.contactPublicId].
  static final contactPublicId = obx.QueryStringProperty<ChatParticipantEntity>(
    _entities[0].properties[1],
  );

  /// See [ChatParticipantEntity.chat].
  static final chat = obx.QueryRelationToOne<ChatParticipantEntity, ChatEntity>(
    _entities[0].properties[2],
  );

  /// See [ChatParticipantEntity.contact].
  static final contact =
      obx.QueryRelationToOne<ChatParticipantEntity, ContactEntity>(
        _entities[0].properties[3],
      );
}

/// [ChatEntity] entity fields to define ObjectBox queries.
class ChatEntity_ {
  /// See [ChatEntity.id].
  static final id = obx.QueryIntegerProperty<ChatEntity>(
    _entities[1].properties[0],
  );

  /// See [ChatEntity.name].
  static final name = obx.QueryStringProperty<ChatEntity>(
    _entities[1].properties[1],
  );

  /// See [ChatEntity.publicChatId].
  static final publicChatId = obx.QueryStringProperty<ChatEntity>(
    _entities[1].properties[2],
  );

  /// See [ChatEntity.isGroup].
  static final isGroup = obx.QueryBooleanProperty<ChatEntity>(
    _entities[1].properties[3],
  );

  /// See [ChatEntity.lastUpdated].
  static final lastUpdated = obx.QueryDateProperty<ChatEntity>(
    _entities[1].properties[4],
  );

  /// see [ChatEntity.messages]
  static final messages = obx.QueryBacklinkToMany<MessageEntity, ChatEntity>(
    MessageEntity_.chat,
  );

  /// see [ChatEntity.participants]
  static final participants =
      obx.QueryBacklinkToMany<ChatParticipantEntity, ChatEntity>(
        ChatParticipantEntity_.chat,
      );
}

/// [ContactEntity] entity fields to define ObjectBox queries.
class ContactEntity_ {
  /// See [ContactEntity.id].
  static final id = obx.QueryIntegerProperty<ContactEntity>(
    _entities[2].properties[0],
  );

  /// See [ContactEntity.name].
  static final name = obx.QueryStringProperty<ContactEntity>(
    _entities[2].properties[1],
  );

  /// See [ContactEntity.phone].
  static final phone = obx.QueryStringProperty<ContactEntity>(
    _entities[2].properties[2],
  );

  /// See [ContactEntity.publicId].
  static final publicId = obx.QueryStringProperty<ContactEntity>(
    _entities[2].properties[3],
  );

  /// see [ContactEntity.chatParticipants]
  static final chatParticipants =
      obx.QueryBacklinkToMany<ChatParticipantEntity, ContactEntity>(
        ChatParticipantEntity_.contact,
      );
}

/// [MediaFileEntity] entity fields to define ObjectBox queries.
class MediaFileEntity_ {
  /// See [MediaFileEntity.id].
  static final id = obx.QueryIntegerProperty<MediaFileEntity>(
    _entities[3].properties[0],
  );

  /// See [MediaFileEntity.publicId].
  static final publicId = obx.QueryStringProperty<MediaFileEntity>(
    _entities[3].properties[1],
  );

  /// See [MediaFileEntity.message].
  static final message = obx.QueryRelationToOne<MediaFileEntity, MessageEntity>(
    _entities[3].properties[2],
  );

  /// See [MediaFileEntity.source].
  static final source = obx.QueryStringProperty<MediaFileEntity>(
    _entities[3].properties[3],
  );
}

/// [MessageEntity] entity fields to define ObjectBox queries.
class MessageEntity_ {
  /// See [MessageEntity.id].
  static final id = obx.QueryIntegerProperty<MessageEntity>(
    _entities[4].properties[0],
  );

  /// See [MessageEntity.messageId].
  static final messageId = obx.QueryStringProperty<MessageEntity>(
    _entities[4].properties[1],
  );

  /// See [MessageEntity.msgPubId].
  static final msgPubId = obx.QueryStringProperty<MessageEntity>(
    _entities[4].properties[2],
  );

  /// See [MessageEntity.message].
  static final message = obx.QueryStringProperty<MessageEntity>(
    _entities[4].properties[3],
  );

  /// See [MessageEntity.fromMe].
  static final fromMe = obx.QueryBooleanProperty<MessageEntity>(
    _entities[4].properties[4],
  );

  /// See [MessageEntity.timestamp].
  static final timestamp = obx.QueryIntegerProperty<MessageEntity>(
    _entities[4].properties[5],
  );

  /// See [MessageEntity.status].
  static final status = obx.QueryStringProperty<MessageEntity>(
    _entities[4].properties[6],
  );

  /// See [MessageEntity.chat].
  static final chat = obx.QueryRelationToOne<MessageEntity, ChatEntity>(
    _entities[4].properties[7],
  );

  /// see [MessageEntity.mediaFiles]
  static final mediaFiles =
      obx.QueryBacklinkToMany<MediaFileEntity, MessageEntity>(
        MediaFileEntity_.message,
      );
}
